from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Protocol.KDF import scrypt
import binascii

# Generate a random salt and derive a 256-bit key from a password
password = b"my_secure_password"
salt = get_random_bytes(16)
key = scrypt(password, salt, key_len=32, N=2**14, r=8, p=1)

# Encrypt data using AES-256-GCM
data = b"Secret message to encrypt"
cipher = AES.new(key, AES.MODE_GCM)
ciphertext, auth_tag = cipher.encrypt_and_digest(data)

# Store salt, nonce, and tag with ciphertext
encrypted_data = salt + cipher.nonce + auth_tag + ciphertext
print("Encrypted data (hex):", binascii.hexlify(encrypted_data))

# Decrypt data
salt, nonce, tag, ciphertext = encrypted_data[:16], encrypted_data[16:32], encrypted_data[32:48], encrypted_data[48:]
key = scrypt(password, salt, key_len=32, N=2**14, r=8, p=1)
cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
decrypted_data = cipher.decrypt_and_verify(ciphertext, tag)
print("Decrypted data:", decrypted_data.decode())   
